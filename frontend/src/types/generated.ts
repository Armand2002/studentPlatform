/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register User
         * @description Register a new user with complete profile (role-based schema validation)
         */
        post: operations["register_user_api_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login User
         * @description Login user and return tokens
         */
        post: operations["login_user_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Refresh access token
         */
        post: operations["refresh_token_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout User
         * @description Logout user
         */
        post: operations["logout_user_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password-reset-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Password Reset
         * @description Request password reset
         */
        post: operations["request_password_reset_api_auth_password_reset_request_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Reset password with token
         */
        post: operations["reset_password_api_auth_password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Students
         * @description Get all students (Admin only)
         */
        get: operations["get_students_api_users_students_get"];
        put?: never;
        /**
         * Create Student
         * @description Create a new student
         */
        post: operations["create_student_api_users_students_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/students/{student_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Student
         * @description Get student by ID
         */
        get: operations["get_student_api_users_students__student_id__get"];
        /**
         * Update Student
         * @description Update student information
         */
        put: operations["update_student_api_users_students__student_id__put"];
        post?: never;
        /**
         * Delete Student
         * @description Delete student (Admin only)
         */
        delete: operations["delete_student_api_users_students__student_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tutors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tutors
         * @description Get all tutors or available tutors only
         */
        get: operations["get_tutors_api_users_tutors_get"];
        put?: never;
        /**
         * Create Tutor
         * @description Create a new tutor
         */
        post: operations["create_tutor_api_users_tutors_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tutors/{tutor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tutor
         * @description Get tutor by ID
         */
        get: operations["get_tutor_api_users_tutors__tutor_id__get"];
        /**
         * Update Tutor
         * @description Update tutor information
         */
        put: operations["update_tutor_api_users_tutors__tutor_id__put"];
        post?: never;
        /**
         * Delete Tutor
         * @description Delete tutor (Admin only)
         */
        delete: operations["delete_tutor_api_users_tutors__tutor_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Profile
         * @description Get current user profile
         */
        get: operations["get_current_user_profile_api_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/student": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Student Profile
         * @description Get current student profile
         */
        get: operations["get_current_student_profile_api_users_me_student_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/tutor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Tutor Profile
         * @description Get current tutor profile
         */
        get: operations["get_current_tutor_profile_api_users_me_tutor_get"];
        put?: never;
        /**
         * Create Current Tutor Profile
         * @description Create tutor profile for the current authenticated user if missing.
         *     Allowed for users with role student or tutor.
         */
        post: operations["create_current_tutor_profile_api_users_me_tutor_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tutors/me/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Assigned Students
         * @description Get students assigned to the current tutor via bookings
         */
        get: operations["get_my_assigned_students_api_users_tutors_me_students_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Bookings
         * @description Get bookings with filters
         */
        get: operations["get_bookings_api_bookings__get"];
        put?: never;
        /**
         * Create Booking
         * @description Create a new booking (Student only)
         */
        post: operations["create_booking_api_bookings__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Upcoming Bookings
         * @description Get upcoming bookings for current user; admins see all upcoming.
         */
        get: operations["get_upcoming_bookings_api_bookings_upcoming_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/completed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Completed Bookings
         * @description Get completed bookings for current user; admins see all completed.
         */
        get: operations["get_completed_bookings_api_bookings_completed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/{booking_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Booking
         * @description Get booking by ID
         */
        get: operations["get_booking_api_bookings__booking_id__get"];
        /**
         * Update Booking
         * @description Update booking (Student who created it, Tutor involved, or Admin)
         */
        put: operations["update_booking_api_bookings__booking_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/{booking_id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm Booking
         * @description Confirm a booking (Tutor or Admin)
         */
        post: operations["confirm_booking_api_bookings__booking_id__confirm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/{booking_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Booking
         * @description Complete a booking (Tutor or Admin)
         */
        post: operations["complete_booking_api_bookings__booking_id__complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/{booking_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Booking
         * @description Cancel a booking (Student who created it, Tutor involved, or Admin)
         */
        post: operations["cancel_booking_api_bookings__booking_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/pricing/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Booking Pricing
         * @description 👁️ ANTEPRIMA PRICING BOOKING - Come Excel preview
         *
         *     Mostra anteprima prezzo booking senza creare la prenotazione.
         *     Utile per UI real-time che mostra prezzo mentre utente compila form.
         */
        post: operations["preview_booking_pricing_api_bookings_pricing_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/calculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate Lesson Price
         * @description 🎯 CALCOLA PREZZO LEZIONE - Replica Excel XLOOKUP
         *
         *     Calcola automaticamente prezzo, split tutor/piattaforma, sconti volume.
         *     Equivalente Excel: =XLOOKUP(TIPOLOGIA+MATERIA, Tariffe[], Prezzi[])
         */
        post: operations["calculate_lesson_price_api_pricing_calculate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Lesson Price
         * @description 👁️ ANTEPRIMA PREZZO - Senza log, per UI real-time
         *
         *     Mostra anteprima calcolo senza salvare nel database.
         *     Utile per form dinamici che mostrano prezzo mentre l'utente digita.
         */
        post: operations["preview_lesson_price_api_pricing_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pricing Rules
         * @description 📋 LISTA REGOLE PRICING - Come Excel tabella tariffe
         *
         *     Mostra tutte le regole tariffarie con filtri.
         *     Equivalente a visualizzare tabella "Tariffe DOPOSCUOLA" in Excel.
         */
        get: operations["list_pricing_rules_api_pricing_rules_get"];
        put?: never;
        /**
         * Create Pricing Rule
         * @description ➕ CREA REGOLA PRICING - Aggiungi nuova tariffa
         *
         *     Crea nuova regola tariffaria.
         *     Equivalente ad aggiungere riga nella tabella Excel "Tariffe DOPOSCUOLA".
         */
        post: operations["create_pricing_rule_api_pricing_rules_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/rules/{rule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pricing Rule
         * @description 🔍 DETTAGLI REGOLA PRICING - Visualizza singola tariffa
         */
        get: operations["get_pricing_rule_api_pricing_rules__rule_id__get"];
        /**
         * Update Pricing Rule
         * @description ✏️ AGGIORNA REGOLA PRICING - Modifica tariffa esistente
         */
        put: operations["update_pricing_rule_api_pricing_rules__rule_id__put"];
        post?: never;
        /**
         * Delete Pricing Rule
         * @description 🗑️ ELIMINA REGOLA PRICING - Rimuovi tariffa
         */
        delete: operations["delete_pricing_rule_api_pricing_rules__rule_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/tutors/{tutor_id}/overrides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tutor Overrides
         * @description 📋 LISTA OVERRIDE TUTOR - Prezzi personalizzati per tutor
         *
         *     Mostra tutte le personalizzazioni pricing per un tutor specifico.
         */
        get: operations["list_tutor_overrides_api_pricing_tutors__tutor_id__overrides_get"];
        put?: never;
        /**
         * Create Tutor Override
         * @description ➕ CREA OVERRIDE TUTOR - Prezzo personalizzato per tutor
         *
         *     Crea pricing personalizzato per tutor specifico.
         *     Esempio: Mario Rossi per Matematica DOPOSCUOLA = €30/h invece di €25/h
         */
        post: operations["create_tutor_override_api_pricing_tutors__tutor_id__overrides_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/rules/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Bulk Pricing Rules
         * @description 📦 CREAZIONE BULK REGOLE - Import massivo tariffe
         *
         *     Crea multiple regole pricing in una volta.
         *     Utile per importare tariffario completo da Excel.
         */
        post: operations["create_bulk_pricing_rules_api_pricing_rules_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/subjects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Subjects
         * @description 📚 LISTA MATERIE - Tutte le materie disponibili
         *
         *     Ritorna lista unica di tutte le materie configurate nelle regole pricing.
         */
        get: operations["list_subjects_api_pricing_subjects_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricing/lesson-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Lesson Types
         * @description 🎯 LISTA TIPOLOGIE LEZIONE - Enum disponibili
         *
         *     Ritorna tutte le tipologie di lezione supportate.
         */
        get: operations["list_lesson_types_api_pricing_lesson_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Payments */
        get: operations["list_payments_api_payments__get"];
        put?: never;
        /** Create Payment */
        post: operations["create_payment_api_payments__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{payment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Payment Status */
        put: operations["update_payment_status_api_payments__payment_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Packages
         * @description Get all active packages with optional filters
         */
        get: operations["get_packages_api_packages__get"];
        put?: never;
        /**
         * Create Package
         * @description Create a new package (Tutor only)
         */
        post: operations["create_package_api_packages__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/purchases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Package Purchases
         * @description Get package purchases
         */
        get: operations["get_package_purchases_api_packages_purchases_get"];
        put?: never;
        /**
         * Create Package Purchase
         * @description Purchase a package (Student only)
         */
        post: operations["create_package_purchase_api_packages_purchases_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/purchases/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Purchases
         * @description Get active package purchases for current student
         */
        get: operations["get_active_purchases_api_packages_purchases_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/purchases/{purchase_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Package Purchase
         * @description Get specific package purchase
         */
        get: operations["get_package_purchase_api_packages_purchases__purchase_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/{package_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Package
         * @description Get package by ID
         */
        get: operations["get_package_api_packages__package_id__get"];
        /**
         * Update Package
         * @description Update package (Tutor who created it or Admin)
         */
        put: operations["update_package_api_packages__package_id__put"];
        post?: never;
        /**
         * Delete Package
         * @description Delete package (Tutor who created it or Admin)
         */
        delete: operations["delete_package_api_packages__package_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/{package_id}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Package Links
         * @description List resource links for a package. Public links for everyone; private only for owner/admin.
         */
        get: operations["list_package_links_api_packages__package_id__links_get"];
        put?: never;
        /**
         * Add Package Link
         * @description Add a resource link to a package (Tutor owner or Admin)
         */
        post: operations["add_package_link_api_packages__package_id__links_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages/links/{link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Package Link
         * @description Delete a resource link (Tutor owner or Admin)
         */
        delete: operations["delete_package_link_api_packages_links__link_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/slots/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slots
         * @description Get slots with filters
         */
        get: operations["get_slots_api_slots__get"];
        put?: never;
        /**
         * Create Slot
         * @description Create a new slot (Tutor only)
         */
        post: operations["create_slot_api_slots__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/slots/multiple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Multiple Slots
         * @description Create multiple slots for a date range (Tutor only)
         */
        post: operations["create_multiple_slots_api_slots_multiple_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/slots/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Slots
         * @description Get available slots for a tutor (public endpoint)
         */
        get: operations["get_available_slots_api_slots_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/slots/{slot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slot
         * @description Get slot by ID
         */
        get: operations["get_slot_api_slots__slot_id__get"];
        /**
         * Update Slot
         * @description Update slot (Tutor who created it or Admin)
         */
        put: operations["update_slot_api_slots__slot_id__put"];
        post?: never;
        /**
         * Delete Slot
         * @description Delete slot (Tutor who created it or Admin)
         */
        delete: operations["delete_slot_api_slots__slot_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/slots/tutor/{tutor_id}/date/{slot_date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Tutor Slots By Date
         * @description Delete all slots for a tutor on a specific date (Tutor or Admin)
         */
        delete: operations["delete_tutor_slots_by_date_api_slots_tutor__tutor_id__date__slot_date__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Metrics */
        get: operations["get_metrics_api_analytics_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Trends */
        get: operations["get_trends_api_analytics_trends_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Dashboard
         * @description Test endpoint per verificare che il router dashboard funzioni
         */
        get: operations["test_dashboard_api_dashboard_test_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 📊 Dashboard Live Completo
         * @description **Dashboard principale con tutti i widget live**
         *
         *         Fornisce tutti i dati necessari per la dashboard real-time:
         *         - Lezioni di oggi (completate, in corso, prossime, cancellate)
         *         - Revenue giornaliero e guadagni tutor
         *         - Tutors e studenti attivi oggi
         *         - KPI operazionali e tassi di conversione
         *
         *         ⚡ **Real-time**: Aggiorna automaticamente ogni 30 secondi
         *         📅 **Filtro**: Solo dati della giornata corrente (TODAY())
         *         🔒 **Accesso**: Richiede ruolo Admin o Tutor
         */
        get: operations["get_live_dashboard_api_dashboard_live_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Today Summary
         * @description 📅 SUMMARY OGGI - Replica Excel FILTER(TODAY())
         *
         *     Widget specifico per situazione giornata corrente.
         *     Perfetto per homepage o widget mobile.
         */
        get: operations["get_today_summary_api_dashboard_today_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/expiring-packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Expiring Packages
         * @description ⏰ PACCHETTI IN SCADENZA - Replica Excel EDATE logic
         *
         *     Lista pacchetti che scadono nei prossimi N giorni.
         *     Utile per planning rinnovi e retention.
         */
        get: operations["get_expiring_packages_api_dashboard_expiring_packages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/tutor-performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tutor Performance Today
         * @description 👨‍🏫 PERFORMANCE TUTOR - Replica Excel COUNTIFS per tutor
         *
         *     Analisi performance tutors per giornata corrente.
         *     Può filtrare per tutor specifico.
         */
        get: operations["get_tutor_performance_today_api_dashboard_tutor_performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Weekly Trends
         * @description 📈 TREND SETTIMANALI - Replica Excel grafici temporali
         *
         *     Analisi trend performance nelle ultime N settimane.
         *     Dati perfetti per grafici line chart.
         */
        get: operations["get_weekly_trends_api_dashboard_trends_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/subjects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subject Analytics
         * @description 📚 ANALYTICS MATERIE - Replica Excel COUNTIFS per subject
         *
         *     Analisi performance per materia insegnata.
         *     Utile per decidere focus business e pricing.
         */
        get: operations["get_subject_analytics_api_dashboard_subjects_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Real Time Alerts
         * @description 🚨 ALERT REAL-TIME - Sistema notifiche intelligenti
         *
         *     Alert automatici basati su condizioni business.
         *     Aggiorna ogni minuto per monitoring continuo.
         */
        get: operations["get_real_time_alerts_api_dashboard_alerts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/booking-insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Booking Insights
         * @description 📊 BOOKING INSIGHTS AVANZATI
         *
         *     Analytics approfonditi sui booking con filtri flessibili.
         *     Equivalente Excel: Tabella pivot complessa con filtri multipli.
         */
        get: operations["get_booking_insights_api_dashboard_booking_insights_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dashboard Health Check
         * @description ❤️ HEALTH CHECK DASHBOARD
         *
         *     Verifica stato servizi dashboard per monitoring.
         */
        get: operations["dashboard_health_check_api_dashboard_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Dashboard Cache
         * @description 🔄 REFRESH CACHE DASHBOARD
         *
         *     Force refresh dei dati dashboard se necessario.
         *     Utile per debug o dopo modifiche massive dati.
         */
        post: operations["refresh_dashboard_cache_api_dashboard_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/export/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Today Data
         * @description 📤 EXPORT DATI OGGI
         *
         *     Esporta dati dashboard per reporting esterno.
         *     Supporta JSON e CSV per integrazione Excel/Google Sheets.
         */
        get: operations["export_today_data_api_dashboard_export_today_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/package-assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Package Assignments */
        get: operations["list_package_assignments_api_admin_package_assignments_get"];
        put?: never;
        /** Create Package Assignment */
        post: operations["create_package_assignment_api_admin_package_assignments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Payments */
        get: operations["list_payments_api_admin_payments_get"];
        put?: never;
        /** Record Payment */
        post: operations["record_payment_api_admin_payments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/payments/{payment_id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Confirm Payment */
        put: operations["confirm_payment_api_admin_payments__payment_id__confirm_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Get all users for admin dashboard
         */
        get: operations["list_users_api_admin_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Approve User
         * @description Approve a user (mainly for tutors)
         */
        put: operations["approve_user_api_admin_users__user_id__approve_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reject User
         * @description Reject a user application
         */
        put: operations["reject_user_api_admin_users__user_id__reject_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/pending-approvals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pending Approvals
         * @description Get all users pending approval (mainly tutors)
         */
        get: operations["get_pending_approvals_api_admin_pending_approvals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/reports/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reports Overview
         * @description Get comprehensive report data
         */
        get: operations["get_reports_overview_api_admin_reports_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Settings
         * @description Get system settings
         */
        get: operations["get_system_settings_api_admin_settings_get"];
        /**
         * Update System Settings
         * @description Update system settings
         */
        put: operations["update_system_settings_api_admin_settings_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AdminPackageAssignment */
        AdminPackageAssignment: {
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Id */
            package_id: number;
            /** Custom Name */
            custom_name?: string | null;
            /** Custom Total Hours */
            custom_total_hours?: number | null;
            /** Custom Price */
            custom_price?: string | null;
            /** Custom Expiry Date */
            custom_expiry_date?: string | null;
            /** Admin Notes */
            admin_notes?: string | null;
            /** Student Notes */
            student_notes?: string | null;
            /**
             * Auto Activate On Payment
             * @default true
             */
            auto_activate_on_payment: boolean;
            /** Id */
            id: number;
            /**
             * Assignment Date
             * Format: date-time
             */
            assignment_date: string;
            status: components["schemas"]["PackageAssignmentStatusEnum"];
            /** Hours Used */
            hours_used: number;
            /** Hours Remaining */
            hours_remaining: number;
            /** Assigned By Admin Id */
            assigned_by_admin_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** AdminPackageAssignmentCreate */
        AdminPackageAssignmentCreate: {
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Id */
            package_id: number;
            /** Custom Name */
            custom_name?: string | null;
            /** Custom Total Hours */
            custom_total_hours?: number | null;
            /** Custom Price */
            custom_price?: number | string | null;
            /** Custom Expiry Date */
            custom_expiry_date?: string | null;
            /** Admin Notes */
            admin_notes?: string | null;
            /** Student Notes */
            student_notes?: string | null;
            /**
             * Auto Activate On Payment
             * @default true
             */
            auto_activate_on_payment: boolean;
        };
        /** AdminPayment */
        AdminPayment: {
            /** Package Assignment Id */
            package_assignment_id: number;
            /** Student Id */
            student_id: number;
            /** Amount */
            amount: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            /**
             * Payment Date
             * Format: date
             */
            payment_date: string;
            /** Reference Number */
            reference_number?: string | null;
            /** Bank Details */
            bank_details?: string | null;
            /** Admin Notes */
            admin_notes?: string | null;
            /** Id */
            id: number;
            status: components["schemas"]["PaymentStatusEnum"];
            /** Processed By Admin Id */
            processed_by_admin_id: number;
            /** Confirmed By Admin Id */
            confirmed_by_admin_id: number | null;
            /** Confirmation Date */
            confirmation_date: string | null;
            /** Receipt Sent */
            receipt_sent: boolean;
            /** Receipt Sent At */
            receipt_sent_at: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** AdminPaymentCreate */
        AdminPaymentCreate: {
            /** Package Assignment Id */
            package_assignment_id: number;
            /** Student Id */
            student_id: number;
            /** Amount */
            amount: number | string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            /**
             * Payment Date
             * Format: date
             */
            payment_date: string;
            /** Reference Number */
            reference_number?: string | null;
            /** Bank Details */
            bank_details?: string | null;
            /** Admin Notes */
            admin_notes?: string | null;
        };
        /** Booking */
        Booking: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Duration Hours */
            duration_hours: number;
            /** Subject */
            subject: string;
            /** Notes */
            notes?: string | null;
            /** Id */
            id: number;
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Purchase Id */
            package_purchase_id: number;
            status: components["schemas"]["BookingStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Calculated Duration
             * @description Durata calcolata automaticamente
             */
            calculated_duration?: number | null;
            /**
             * Calculated Price
             * @description Prezzo calcolato automaticamente €
             */
            calculated_price?: number | null;
            /**
             * Tutor Earnings
             * @description Guadagno tutor €
             */
            tutor_earnings?: number | null;
            /**
             * Platform Fee
             * @description Fee piattaforma €
             */
            platform_fee?: number | null;
            /**
             * Pricing Rule Applied
             * @description Regola pricing applicata
             */
            pricing_rule_applied?: string | null;
        };
        /** BookingCreate */
        BookingCreate: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Duration Hours */
            duration_hours: number;
            /** Subject */
            subject: string;
            /** Notes */
            notes?: string | null;
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Purchase Id */
            package_purchase_id: number;
        };
        /**
         * BookingStatus
         * @enum {string}
         */
        BookingStatus: "pending" | "confirmed" | "completed" | "cancelled";
        /** BookingUpdate */
        BookingUpdate: {
            /** Start Time */
            start_time?: string | null;
            /** End Time */
            end_time?: string | null;
            /** Duration Hours */
            duration_hours?: number | null;
            /** Subject */
            subject?: string | null;
            /** Notes */
            notes?: string | null;
            status?: components["schemas"]["BookingStatus"] | null;
        };
        /** BookingWithDetails */
        BookingWithDetails: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Duration Hours */
            duration_hours: number;
            /** Subject */
            subject: string;
            /** Notes */
            notes?: string | null;
            /** Id */
            id: number;
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Purchase Id */
            package_purchase_id: number;
            status: components["schemas"]["BookingStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Calculated Duration
             * @description Durata calcolata automaticamente
             */
            calculated_duration?: number | null;
            /**
             * Calculated Price
             * @description Prezzo calcolato automaticamente €
             */
            calculated_price?: number | null;
            /**
             * Tutor Earnings
             * @description Guadagno tutor €
             */
            tutor_earnings?: number | null;
            /**
             * Platform Fee
             * @description Fee piattaforma €
             */
            platform_fee?: number | null;
            /**
             * Pricing Rule Applied
             * @description Regola pricing applicata
             */
            pricing_rule_applied?: string | null;
            /** Student Name */
            student_name: string;
            /** Tutor Name */
            tutor_name: string;
            /** Package Name */
            package_name: string;
        };
        /**
         * BookingWithPricing
         * @description Booking con dettagli pricing completi
         */
        BookingWithPricing: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Duration Hours */
            duration_hours: number;
            /** Subject */
            subject: string;
            /** Notes */
            notes?: string | null;
            /** Id */
            id: number;
            /** Student Id */
            student_id: number;
            /** Tutor Id */
            tutor_id: number;
            /** Package Purchase Id */
            package_purchase_id: number;
            status: components["schemas"]["BookingStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Calculated Duration
             * @description Durata calcolata automaticamente
             */
            calculated_duration?: number | null;
            /**
             * Calculated Price
             * @description Prezzo calcolato automaticamente €
             */
            calculated_price?: number | null;
            /**
             * Tutor Earnings
             * @description Guadagno tutor €
             */
            tutor_earnings?: number | null;
            /**
             * Platform Fee
             * @description Fee piattaforma €
             */
            platform_fee?: number | null;
            /**
             * Pricing Rule Applied
             * @description Regola pricing applicata
             */
            pricing_rule_applied?: string | null;
            /**
             * Pricing Breakdown
             * @description Dettagli calcolo pricing
             */
            pricing_breakdown?: Record<string, never> | null;
        };
        /**
         * BulkPricingRuleCreate
         * @description Schema per creazione bulk regole pricing
         */
        BulkPricingRuleCreate: {
            /**
             * Rules
             * @description Lista regole da creare
             */
            rules: components["schemas"]["PricingRuleCreate"][];
        };
        /**
         * BulkPricingRuleResponse
         * @description Schema response creazione bulk
         */
        BulkPricingRuleResponse: {
            /**
             * Created Count
             * @description Numero regole create
             */
            created_count: number;
            /**
             * Created Ids
             * @description ID regole create
             */
            created_ids: number[];
            /**
             * Errors
             * @description Errori eventuali
             */
            errors?: string[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LessonType
         * @enum {string}
         */
        LessonType: "doposcuola" | "individuale" | "gruppo" | "online";
        /**
         * LoginForm
         * @description Login form schema - matches OAuth2PasswordRequestForm
         */
        LoginForm: {
            /**
             * Username
             * Format: email
             */
            username: string;
            /** Password */
            password: string;
        };
        /** MultipleSlotsCreate */
        MultipleSlotsCreate: {
            /** Tutor Id */
            tutor_id: number;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * End Date
             * Format: date
             */
            end_date: string;
            /**
             * Start Time
             * Format: time
             */
            start_time: string;
            /**
             * End Time
             * Format: time
             */
            end_time: string;
            /** Days Of Week */
            days_of_week?: number[] | null;
        };
        /** Package */
        Package: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Total Hours */
            total_hours: number;
            /** Price */
            price: string;
            /** Subject */
            subject: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Id */
            id: number;
            /** Tutor Id */
            tutor_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PackageAssignmentStatusEnum
         * @enum {string}
         */
        PackageAssignmentStatusEnum: "draft" | "assigned" | "active" | "suspended" | "completed" | "cancelled";
        /** PackageCreate */
        PackageCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Total Hours */
            total_hours: number;
            /** Price */
            price: number | string;
            /** Subject */
            subject: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Tutor Id */
            tutor_id: number;
        };
        /** PackagePurchase */
        PackagePurchase: {
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Hours Remaining */
            hours_remaining: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Id */
            id: number;
            /** Student Id */
            student_id: number;
            /** Package Id */
            package_id: number;
            /**
             * Purchase Date
             * Format: date-time
             */
            purchase_date: string;
            /** Hours Used */
            hours_used: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** PackagePurchaseCreate */
        PackagePurchaseCreate: {
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Hours Remaining */
            hours_remaining: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Student Id */
            student_id: number;
            /** Package Id */
            package_id: number;
        };
        /** PackagePurchaseWithDetails */
        PackagePurchaseWithDetails: {
            /**
             * Expiry Date
             * Format: date
             */
            expiry_date: string;
            /** Hours Remaining */
            hours_remaining: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /** Id */
            id: number;
            /** Student Id */
            student_id: number;
            /** Package Id */
            package_id: number;
            /**
             * Purchase Date
             * Format: date-time
             */
            purchase_date: string;
            /** Hours Used */
            hours_used: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            package: components["schemas"]["Package"];
            /** Links */
            links?: components["schemas"]["PackageResourceLink"][] | null;
        };
        /** PackageResourceLink */
        PackageResourceLink: {
            /** Title */
            title: string;
            /** Url */
            url: string;
            /** Provider */
            provider?: string | null;
            /**
             * Is Public
             * @default true
             */
            is_public: boolean;
            /** Id */
            id: number;
            /** Package Id */
            package_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** PackageResourceLinkBase */
        PackageResourceLinkBase: {
            /** Title */
            title: string;
            /** Url */
            url: string;
            /** Provider */
            provider?: string | null;
            /**
             * Is Public
             * @default true
             */
            is_public: boolean;
        };
        /** PackageUpdate */
        PackageUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Total Hours */
            total_hours?: number | null;
            /** Price */
            price?: number | string | null;
            /** Subject */
            subject?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** PasswordReset */
        PasswordReset: {
            /** Token */
            token: string;
            /** New Password */
            new_password: string;
        };
        /** PasswordResetRequest */
        PasswordResetRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Payment */
        Payment: {
            /** Amount Cents */
            amount_cents: number;
            /**
             * Currency
             * @default EUR
             */
            currency: string;
            /** Status */
            status: string;
            /** Provider */
            provider?: string | null;
            /** Description */
            description?: string | null;
            /** External Id */
            external_id?: string | null;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PaymentMethodEnum
         * @enum {string}
         */
        PaymentMethodEnum: "bank_transfer" | "cash" | "check" | "card_offline" | "other";
        /**
         * PaymentStatusEnum
         * @enum {string}
         */
        PaymentStatusEnum: "pending" | "partial" | "completed" | "overdue" | "cancelled";
        /** PaymentUpdate */
        PaymentUpdate: {
            /** Status */
            status?: string | null;
        };
        /**
         * PricingCalculationRequest
         * @description Schema per richiesta calcolo pricing
         */
        PricingCalculationRequest: {
            /** @description Tipologia lezione */
            lesson_type: components["schemas"]["LessonType"];
            /**
             * Subject
             * @description Materia
             */
            subject: string;
            /**
             * Duration Hours
             * @description Durata ore
             */
            duration_hours: number;
            /**
             * Tutor Id
             * @description ID tutor
             */
            tutor_id: number;
        };
        /**
         * PricingCalculationResponse
         * @description Schema response calcolo pricing
         */
        PricingCalculationResponse: {
            /** Lesson Type */
            lesson_type: string;
            /** Subject */
            subject: string;
            /** Duration Hours */
            duration_hours: number;
            /** Tutor Id */
            tutor_id: number;
            /** Applied Rule Id */
            applied_rule_id: number | null;
            /** Applied Rule Name */
            applied_rule_name: string | null;
            /** Applied Override Id */
            applied_override_id: number | null;
            /**
             * Base Price Per Hour
             * @description Prezzo base orario €
             */
            base_price_per_hour: number;
            /**
             * Total Base Price
             * @description Prezzo totale base €
             */
            total_base_price: number;
            /**
             * Volume Discount Rate
             * @description Tasso sconto volume (0.1 = 10%)
             */
            volume_discount_rate: number;
            /**
             * Discount Amount
             * @description Importo sconto €
             */
            discount_amount: number;
            /**
             * Final Total Price
             * @description Prezzo finale totale €
             */
            final_total_price: number;
            /**
             * Tutor Percentage
             * @description Percentuale tutor applicata
             */
            tutor_percentage: number;
            /**
             * Tutor Earnings
             * @description Guadagno tutor €
             */
            tutor_earnings: number;
            /**
             * Platform Fee
             * @description Fee piattaforma €
             */
            platform_fee: number;
            /**
             * Calculation Timestamp
             * @description Timestamp calcolo ISO
             */
            calculation_timestamp: string;
            /**
             * Has Override
             * @description Se applicato override tutor
             */
            has_override: boolean;
            /**
             * Has Volume Discount
             * @description Se applicato sconto volume
             */
            has_volume_discount: boolean;
        };
        /**
         * PricingPreviewRequest
         * @description Schema per anteprima pricing (senza log)
         */
        PricingPreviewRequest: {
            lesson_type: components["schemas"]["LessonType"];
            /** Subject */
            subject: string;
            /** Duration Hours */
            duration_hours: number;
            /** Tutor Id */
            tutor_id: number;
        };
        /**
         * PricingRule
         * @description Schema response regola pricing
         */
        PricingRule: {
            /**
             * Name
             * @description Nome univoco regola
             */
            name: string;
            /** @description Tipologia lezione */
            lesson_type: components["schemas"]["LessonType"];
            /**
             * Subject
             * @description Materia
             */
            subject: string;
            /**
             * Min Duration
             * @description Durata minima ore
             * @default 1
             */
            min_duration: number;
            /**
             * Max Duration
             * @description Durata massima ore
             */
            max_duration?: number | null;
            /**
             * Base Price Per Hour
             * @description Prezzo base orario €
             */
            base_price_per_hour: string;
            /**
             * Tutor Percentage
             * @description Percentuale tutor (0.7 = 70%)
             * @default 0.7
             */
            tutor_percentage: string;
            /**
             * Volume Discounts
             * @description Sconti volume
             */
            volume_discounts?: {
                [key: string]: number;
            } | null;
            /**
             * Is Active
             * @description Regola attiva
             * @default true
             */
            is_active: boolean;
            /**
             * Priority
             * @description Priorità (più basso = più priorità)
             * @default 100
             */
            priority: number;
            /**
             * Description
             * @description Descrizione
             */
            description?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PricingRuleCreate
         * @description Schema per creazione regola pricing
         */
        PricingRuleCreate: {
            /**
             * Name
             * @description Nome univoco regola
             */
            name: string;
            /** @description Tipologia lezione */
            lesson_type: components["schemas"]["LessonType"];
            /**
             * Subject
             * @description Materia
             */
            subject: string;
            /**
             * Min Duration
             * @description Durata minima ore
             * @default 1
             */
            min_duration: number;
            /**
             * Max Duration
             * @description Durata massima ore
             */
            max_duration?: number | null;
            /**
             * Base Price Per Hour
             * @description Prezzo base orario €
             */
            base_price_per_hour: number | string;
            /**
             * Tutor Percentage
             * @description Percentuale tutor (0.7 = 70%)
             * @default 0.7
             */
            tutor_percentage: number | string;
            /**
             * Volume Discounts
             * @description Sconti volume
             */
            volume_discounts?: {
                [key: string]: number;
            } | null;
            /**
             * Is Active
             * @description Regola attiva
             * @default true
             */
            is_active: boolean;
            /**
             * Priority
             * @description Priorità (più basso = più priorità)
             * @default 100
             */
            priority: number;
            /**
             * Description
             * @description Descrizione
             */
            description?: string | null;
        };
        /**
         * PricingRuleListResponse
         * @description Schema response lista regole pricing
         */
        PricingRuleListResponse: {
            /** Total */
            total: number;
            /** Items */
            items: components["schemas"]["PricingRule"][];
        };
        /**
         * PricingRuleUpdate
         * @description Schema per aggiornamento regola pricing
         */
        PricingRuleUpdate: {
            /** Name */
            name?: string | null;
            lesson_type?: components["schemas"]["LessonType"] | null;
            /** Subject */
            subject?: string | null;
            /** Min Duration */
            min_duration?: number | null;
            /** Max Duration */
            max_duration?: number | null;
            /** Base Price Per Hour */
            base_price_per_hour?: (number | string) | null;
            /** Tutor Percentage */
            tutor_percentage?: (number | string) | null;
            /** Volume Discounts */
            volume_discounts?: {
                [key: string]: number;
            } | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Priority */
            priority?: number | null;
            /** Description */
            description?: string | null;
        };
        /** Slot */
        Slot: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Start Time
             * Format: time
             */
            start_time: string;
            /**
             * End Time
             * Format: time
             */
            end_time: string;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Id */
            id: number;
            /** Tutor Id */
            tutor_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** SlotCreate */
        SlotCreate: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Start Time
             * Format: time
             */
            start_time: string;
            /**
             * End Time
             * Format: time
             */
            end_time: string;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Tutor Id */
            tutor_id: number;
        };
        /** SlotUpdate */
        SlotUpdate: {
            /** Start Time */
            start_time?: string | null;
            /** End Time */
            end_time?: string | null;
            /** Is Available */
            is_available?: boolean | null;
        };
        /** Student */
        Student: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /**
             * Date Of Birth
             * Format: date
             */
            date_of_birth: string;
            /** Institute */
            institute: string;
            /** Class Level */
            class_level: string;
            /** Phone Number */
            phone_number: string;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** StudentCreate */
        StudentCreate: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /**
             * Date Of Birth
             * Format: date
             */
            date_of_birth: string;
            /** Institute */
            institute: string;
            /** Class Level */
            class_level: string;
            /** Phone Number */
            phone_number: string;
            user: components["schemas"]["UserCreate"];
        };
        /** StudentUpdate */
        StudentUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Institute */
            institute?: string | null;
            /** Class Level */
            class_level?: string | null;
            /** Phone Number */
            phone_number?: string | null;
        };
        /** StudentWithUser */
        StudentWithUser: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /**
             * Date Of Birth
             * Format: date
             */
            date_of_birth: string;
            /** Institute */
            institute: string;
            /** Class Level */
            class_level: string;
            /** Phone Number */
            phone_number: string;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            user: components["schemas"]["User"];
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
        };
        /** Tutor */
        Tutor: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Bio */
            bio?: string | null;
            /** Subjects */
            subjects?: string | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** TutorCreate */
        TutorCreate: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Bio */
            bio?: string | null;
            /** Subjects */
            subjects?: string | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            user: components["schemas"]["UserCreate"];
        };
        /**
         * TutorPricingOverride
         * @description Schema response override tutor
         */
        TutorPricingOverride: {
            /**
             * Tutor Id
             * @description ID tutor
             */
            tutor_id: number;
            /**
             * Pricing Rule Id
             * @description ID regola pricing
             */
            pricing_rule_id: number;
            /**
             * Custom Price Per Hour
             * @description Prezzo custom orario €
             */
            custom_price_per_hour?: string | null;
            /**
             * Custom Tutor Percentage
             * @description Percentuale custom tutor
             */
            custom_tutor_percentage?: string | null;
            /**
             * Is Active
             * @description Override attivo
             * @default true
             */
            is_active: boolean;
            /**
             * Valid From
             * @description Valido da
             */
            valid_from?: string | null;
            /**
             * Valid Until
             * @description Valido fino
             */
            valid_until?: string | null;
            /**
             * Notes
             * @description Note admin
             */
            notes?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * TutorPricingOverrideCreate
         * @description Schema per creazione override tutor
         */
        TutorPricingOverrideCreate: {
            /**
             * Tutor Id
             * @description ID tutor
             */
            tutor_id: number;
            /**
             * Pricing Rule Id
             * @description ID regola pricing
             */
            pricing_rule_id: number;
            /**
             * Custom Price Per Hour
             * @description Prezzo custom orario €
             */
            custom_price_per_hour?: (number | string) | null;
            /**
             * Custom Tutor Percentage
             * @description Percentuale custom tutor
             */
            custom_tutor_percentage?: (number | string) | null;
            /**
             * Is Active
             * @description Override attivo
             * @default true
             */
            is_active: boolean;
            /**
             * Valid From
             * @description Valido da
             */
            valid_from?: string | null;
            /**
             * Valid Until
             * @description Valido fino
             */
            valid_until?: string | null;
            /**
             * Notes
             * @description Note admin
             */
            notes?: string | null;
        };
        /**
         * TutorPricingOverrideListResponse
         * @description Schema response lista override tutor
         */
        TutorPricingOverrideListResponse: {
            /** Total */
            total: number;
            /** Items */
            items: components["schemas"]["TutorPricingOverride"][];
        };
        /**
         * TutorSelfCreate
         * @description Payload to create a tutor profile for the current authenticated user.
         */
        TutorSelfCreate: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Bio */
            bio?: string | null;
            /** Subjects */
            subjects?: string | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
        };
        /** TutorUpdate */
        TutorUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Bio */
            bio?: string | null;
            /** Subjects */
            subjects?: string | null;
            /** Is Available */
            is_available?: boolean | null;
        };
        /** TutorWithUser */
        TutorWithUser: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Bio */
            bio?: string | null;
            /** Subjects */
            subjects?: string | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            user: components["schemas"]["User"];
        };
        /** User */
        User: {
            /**
             * Email
             * Format: email
             */
            email: string;
            role: components["schemas"]["UserRole"];
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /** Is Verified */
            is_verified: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            role: components["schemas"]["UserRole"];
            /** Password */
            password: string;
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "student" | "tutor" | "admin";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_user_api_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_user_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginForm"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_auth_refresh_post: {
        parameters: {
            query: {
                refresh_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_user_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    request_password_reset_api_auth_password_reset_request_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_password_api_auth_password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    get_students_api_users_students_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Student"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_student_api_users_students_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Student"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_student_api_users_students__student_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentWithUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_student_api_users_students__student_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                student_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Student"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_student_api_users_students__student_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tutors_api_users_tutors_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                available_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tutor"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tutor_api_users_tutors_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TutorCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tutor"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tutor_api_users_tutors__tutor_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tutor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TutorWithUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tutor_api_users_tutors__tutor_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tutor_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TutorUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tutor"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tutor_api_users_tutors__tutor_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tutor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_profile_api_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    get_current_student_profile_api_users_me_student_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Student"];
                };
            };
        };
    };
    get_current_tutor_profile_api_users_me_tutor_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tutor"];
                };
            };
        };
    };
    create_current_tutor_profile_api_users_me_tutor_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TutorSelfCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tutor"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_assigned_students_api_users_tutors_me_students_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentWithUser"][];
                };
            };
        };
    };
    get_bookings_api_bookings__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                student_id?: number;
                tutor_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_booking_api_bookings__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_upcoming_bookings_api_bookings_upcoming_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_completed_bookings_api_bookings_completed_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_booking_api_bookings__booking_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                booking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingWithDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_booking_api_bookings__booking_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                booking_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirm_booking_api_bookings__booking_id__confirm_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                booking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_booking_api_bookings__booking_id__complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                booking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_booking_api_bookings__booking_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                booking_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_booking_pricing_api_bookings_pricing_preview_post: {
        parameters: {
            query?: {
                lesson_type?: string;
                subject?: string;
                duration_hours?: number;
                tutor_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingWithPricing"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    calculate_lesson_price_api_pricing_calculate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingCalculationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingCalculationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_lesson_price_api_pricing_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingPreviewRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingCalculationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_pricing_rules_api_pricing_rules_get: {
        parameters: {
            query?: {
                /** @description Filter by lesson type */
                lesson_type?: string | null;
                /** @description Filter by subject */
                subject?: string | null;
                /** @description Show only active rules */
                active_only?: boolean;
                /** @description Pagination offset */
                skip?: number;
                /** @description Pagination limit */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingRuleListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_pricing_rule_api_pricing_rules_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingRuleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingRule"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pricing_rule_api_pricing_rules__rule_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingRule"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_pricing_rule_api_pricing_rules__rule_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PricingRuleUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricingRule"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_pricing_rule_api_pricing_rules__rule_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tutor_overrides_api_pricing_tutors__tutor_id__overrides_get: {
        parameters: {
            query?: {
                /** @description Show only active overrides */
                active_only?: boolean;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                tutor_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TutorPricingOverrideListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tutor_override_api_pricing_tutors__tutor_id__overrides_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tutor_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TutorPricingOverrideCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TutorPricingOverride"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_bulk_pricing_rules_api_pricing_rules_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkPricingRuleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkPricingRuleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_subjects_api_pricing_subjects_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_lesson_types_api_pricing_lesson_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_payments_api_payments__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_payment_api_payments__post: {
        parameters: {
            query: {
                amount_cents: number;
                currency?: string;
                provider?: string;
                description?: string;
                external_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_payment_status_api_payments__payment_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_packages_api_packages__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                subject?: string;
                tutor_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_package_api_packages__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PackageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_package_purchases_api_packages_purchases_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                student_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackagePurchase"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_package_purchase_api_packages_purchases_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PackagePurchaseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackagePurchase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_purchases_api_packages_purchases_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackagePurchase"][];
                };
            };
        };
    };
    get_package_purchase_api_packages_purchases__purchase_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                purchase_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackagePurchaseWithDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_package_api_packages__package_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_package_api_packages__package_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PackageUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_package_api_packages__package_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_package_links_api_packages__package_id__links_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageResourceLink"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_package_link_api_packages__package_id__links_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PackageResourceLinkBase"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageResourceLink"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_package_link_api_packages_links__link_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                link_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_slots_api_slots__get: {
        parameters: {
            query?: {
                tutor_id?: number;
                slot_date?: string;
                available_only?: boolean;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_slot_api_slots__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SlotCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_multiple_slots_api_slots_multiple_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MultipleSlotsCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_slots_api_slots_available_get: {
        parameters: {
            query: {
                tutor_id: number;
                slot_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_slot_api_slots__slot_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slot_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_slot_api_slots__slot_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slot_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SlotUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Slot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_slot_api_slots__slot_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slot_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tutor_slots_by_date_api_slots_tutor__tutor_id__date__slot_date__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tutor_id: number;
                slot_date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_metrics_api_analytics_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_trends_api_analytics_trends_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_dashboard_api_dashboard_test_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_live_dashboard_api_dashboard_live_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dati dashboard completi per la giornata corrente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_today_summary_api_dashboard_today_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_expiring_packages_api_dashboard_expiring_packages_get: {
        parameters: {
            query?: {
                /** @description Days ahead to check for expiring packages */
                days_ahead?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tutor_performance_today_api_dashboard_tutor_performance_get: {
        parameters: {
            query?: {
                /** @description Filter by specific tutor ID */
                tutor_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_weekly_trends_api_dashboard_trends_get: {
        parameters: {
            query?: {
                /** @description Number of weeks to analyze */
                weeks_back?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_subject_analytics_api_dashboard_subjects_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_real_time_alerts_api_dashboard_alerts_get: {
        parameters: {
            query?: {
                /** @description Filter by alert type: urgent, warning, info */
                alert_type?: string | null;
                /** @description Filter by category: packages, revenue, tutors, operations */
                category?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_booking_insights_api_dashboard_booking_insights_get: {
        parameters: {
            query?: {
                /** @description Filter from date (YYYY-MM-DD) */
                date_from?: string | null;
                /** @description Filter to date (YYYY-MM-DD) */
                date_to?: string | null;
                /** @description Filter by tutor */
                tutor_id?: number | null;
                /** @description Filter by student */
                student_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dashboard_health_check_api_dashboard_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_dashboard_cache_api_dashboard_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    export_today_data_api_dashboard_export_today_get: {
        parameters: {
            query?: {
                /** @description Export format */
                format?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - Admin or Tutor role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_package_assignments_api_admin_package_assignments_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_package_assignment_api_admin_package_assignments_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPackageAssignmentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminPackageAssignment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_payments_api_admin_payments_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    record_payment_api_admin_payments_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminPaymentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminPayment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirm_payment_api_admin_payments__payment_id__confirm_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                payment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_admin_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    approve_user_api_admin_users__user_id__approve_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reject_user_api_admin_users__user_id__reject_put: {
        parameters: {
            query?: {
                reason?: string;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pending_approvals_api_admin_pending_approvals_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_reports_overview_api_admin_reports_overview_get: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_system_settings_api_admin_settings_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_system_settings_api_admin_settings_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
